pext_range = [5, 25];
rise_range = [25, 45];
pflex_range = [50, 80];
fall_range = [70, 95];

init = [10, 30, 58, 77; ...
    20, 30, 58, 77; ...
    10, 40, 58, 77; ...
    20, 40, 58, 77; ...
    10, 30, 72, 77; ...
    20, 30, 72, 77; ...
    10, 40, 72, 77; ...
    20, 40, 72, 77; ...
    10, 30, 58, 88; ...
    20, 30, 58, 88; ...
    10, 40, 58, 88; ...
    20, 40, 58, 88; ...
    10, 30, 72, 88; ...
    20, 30, 72, 88; ...
    10, 40, 72, 88; ...
    20, 40, 72, 88];
init = array2table(init, 'VariableNames', {'pext', 'rise', 'pflex', 'fall'});

pext = optimizableVariable('pext', pext_range, 'Type', 'integer');
rise = optimizableVariable('rise', rise_range, 'Type', 'integer');
pflex = ...
    optimizableVariable('pflex', pflex_range, 'Type', 'integer');
fall = optimizableVariable('fall', fall_range, 'Type', 'integer');
optimisation_variables = [pext, rise, pflex, fall];

parameter_constraints = @bimodalParameterConstraints;

hill2_size = 40;

hill1 = [15, 30, 60, 80];
hill2 = hill1;%[18, 40, 75, 95];

objective_function = @(X) (bayesoptHills(X, hill2_size, hill1, hill2));

acquisition_function = 'expected-improvement-plus';

n_iterations = 40;
n_seeds = [1, 5, 15, 20];
ratios = [0.05, 2, 5, 8, 0.95];

n_repetitions = 50;
diff = zeros(length(ratios), length(n_seeds), n_repetitions, n_iterations);
%diff = zeros(length(n_seeds), n_repetitions, n_iterations);
%diff = zeros(n_repetitions, n_iterations);

for r = 1:length(ratios)
    for s = 1:length(n_seeds)
        parfor n = 1:n_repetitions 

            results = 0;
            for i=1:n_iterations
                switch i
                    case 1
                        results = bayesopt(objective_function, ...
                            optimisation_variables, ...
                            'XConstraintFcn', parameter_constraints, ...
                            'AcquisitionFunctionName', acquisition_function, ...
                            'MaxObjectiveEvaluations', 1, ...
                            'NumSeedPoints', n_seeds(s), ...
                            'PlotFcn', [], ...
                            'Verbose', 0, ...
                            'ExplorationRatio', ratios(r));
                    otherwise
                        results = results.resume('MaxObjectiveEvaluations', 1);
                end
                %diff(s, n, i) = combinedHills(hill2_size, ...
                %diff(n, i) = combinedHills(hill2_size, ...
                diff(r, s, n, i) = combinedHills(hill2_size, ...
                    table2array(results.XAtMinEstimatedObjective), hill1, hill2) - 480;
            end

            disp('Done one repetition.');

        end
    end
end

save('big_results.mat', 'diff');